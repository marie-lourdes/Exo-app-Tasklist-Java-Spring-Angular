/* le lien configuré dans angular.json, qui charge le fichier sans ajout de stylesUrl  dans le point d entree de l appli main.ts ou link dans index.html
Angular charge le fichier css automatiquement grace a la configuration angular.json*/
@use 'colors';
// Définition de variables pour réutilisation
$rose-width: 60px;
$rose-height: 60px;
$margin-horizontal: 5vw;

body {
   min-height: 100vh;
  // display:flex;
   @media (max-width: 768px) {
     font-size: 1rem;
   }
 }


main {
    width: 100%;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    min-height: 100vh;

  }
h1{
  text-align: center;
  margin-bottom: 5rem;
  }
h2 {
  color: colors.$color-title;
  }
ul {
  padding-left: 0;
  }
// Application des styles

.main-separator {
  display: flex;
  justify-content: center;
  width: 100vw;
  & .separator-rose {
      height: $rose-height;
      width: $rose-width;
      margin: 0 $margin-horizontal;

      // Ajout d'un effet hover
      // backwards applique les valeurs de depart  du keyframe de scale 0 au lancement de l animation
      animation: 5s ease-out 1s 1 backwards slidein;
     /* test transition css
      &:hover {
        transform: scale(2);
        transition: transform 3s ease-out; /* avec changement de valeur, propriete tel que : hover (une sorte de condition et changement d etat)
        a la difference des animtation css avec les keyframes qui s active meme au chargement d une page sans avoir besoin de changement d etat
      }*/
  @media (max-width: 768px) {
       height: 30px;
       width: 30px;
      }
    }
  }

// Style de base des boutons
button {
  border: none;
  margin-left: 2rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  }

footer {
  display: flex;
  justify-content: center;
  }
@keyframes slidein {
  from { transform: scaleX(0); }
  to   { transform: scaleX(1); }
}





